node {
  print 'paramsüëâ' + params
	print "params.anything_to_undefinedüëâ" + params.anything_to_undefined     // output: null

  def v = params.anything_to_undefined ?: 'default-value'
  print "params.anything_to_undefined ?: 'default-value'üëâ" + v

  if (params.MultiLines) {
    params.MultiLines.split("\\r?\\n").each {
      if (it.trim()) {
        echo 'params.MultiLines.split("\\r?\\n").eachüëâ' + it
      }
    }
  }

  // clean workspace
  cleanWs()

  try {
    docker.image('node:14').inside {
      stage("Source code") {
        //git branch: Git_Branch, credentialsId: Cred_ID, url: Git_Url
      }
      stage('Install packages') {
        // withNPM(npmrcConfig: 'npmrc') {
        //   sh 'npm install'
        // }
        sh 'npm i'
      }
      stage('Checks') {
        // TODO
      }
      stage('Test') {
        if (params.Skip_Test != true) {
          // TODO
          echo 'do test'
        } else {
          echo 'Skip test'
        }
      }
      stage('Deploy') {
        if (params.Skip_Deploy != true) {
          // TODO
          echo 'do deploy'
        } else {
          echo 'Skip deploy'
        }
      }
      stage('Deploy to production') {
        def toProdParams
        def didTimeout = false
        try {
          timeout(time: 15, unit: 'SECONDS') { // change to a convenient timeout for you
            toProdParams = input(
              id: 'deployToProd', message: 'Deploy to production?', parameters: [
                choice(choices: ['prod-a.com/api', 'prod-b.com/api'], description: 'Backend endpoint to connect', name: 'Backend_Uri'),
                booleanParam(defaultValue: false, description: 'Archive this package', name: 'Archive')
              ])
          }
        } catch (err) { // timeout reached or input false
          // def user = err.getCauses()[0].getUser() // required administrator
          //if('SYSTEM' == user.toString()) { // SYSTEM means timeout.
          didTimeout = true
          //} else {
          //toProd = false
          //echo "Aborted by: [${user}]"
          //}
        }
        echo '‚úãYour choice: ' + toProdParams // null if timeout
        if (toProdParams) {
          echo toProdParams.Backend_Uri
        }

        if (didTimeout) {
          // do something on timeout
          echo "no input was received before timeout"
        } else if (toProdParams) {
          // do something
          echo "Deployed to production."
        } else {
          // do something else
          echo "Skip deployment to production."
        }
      }
    }
  } catch (error) {
    echo """‚ùóException thrown:
    ${error.class}
    ${error.message}
    """

    // error.printStackTrace() // required administrator

    currentBuild.result = 'FAILURE'
  } finally {
    if (currentBuild.result == 'SUCCESS') {
      // TODO
    } else {
      // TODO
    }
    echo currentBuild.result
  }
}